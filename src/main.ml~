open Printf 

let example = ref ""
let property = ref "shape"
let usage = sprintf "usage: %s -e example -p property [-n | -d | -f | -progress | -r | -rdir dir | -c]" Sys.argv.(0)
 
let arglist = [
  ("-n",Arg.Unit (fun () -> Globals.nullpointer_dereferencing := true), ": checking Null Pointers dereferencing");
  ("-d",Arg.Unit (fun () -> Globals.danglingpointer := true), ": checking Dangling Pointers dereferencing");
  ("-f",Arg.Unit (fun () -> Globals.free_dereferencing := true),  ": checking Free cell dereferencing");
  ("-c",Arg.Unit (fun () -> Globals.cycle := true),  ": checking cycle creation");
  ("-r",Arg.Unit (fun () -> Globals.results := true),  ": prints the results");
  ("-rdir",Arg.String (fun dir -> Globals.results_dir := dir),  ": prints the results in [DIR]");
  ("-t",Arg.Unit (fun () -> Globals.trace := true),  ": including tracing of constraint generation");
  ("-progress",Arg.Unit (fun () -> Globals.progress := true),  ": printing the progress bar");
  ("-p", Arg.String (fun s -> property := s;), ": a specific property");
  ("-e", Arg.String (fun s -> example := s;), ": a specific example");
]

let runDebug _ = begin
(*   Globals.mkdir "tmp"; *)
(*   Globals.mkdir "marshal"; *)
(*   let ic = open_in "marshal/extra" in *)
(*   let p = (Marshal.from_channel ic : Constraint.t) in *)
(*   close_in ic; *)
(*   let ic' = open_in "marshal/extra-parent" in *)
(*   let parent = (Marshal.from_channel ic' : Constraint.t) in *)
(*   close_in ic'; *)
(*   Constraint.to_dot p (sprintf "tmp/p-%d" (Constraint.id p)); *)
(*   Constraint.to_dot parent (sprintf "tmp/parent-%d" (Constraint.id parent)); *)
(*   let x = Label.local (0,"x") in *)
(*   let r = (new Rule.new_cell 1 4 x) in *)
(*   let res = Rule.post r parent in *)
(*   List.iter (fun c -> Constraint.to_dot c (sprintf "tmp/res-%d" (Constraint.id c))) res; *)
end
    
let run_example property = function
  | "coarsestack" -> let module M = ForwardAnalysis.Algorithm(Coarse.Stack) in M.verify property
  | "coarsestacknogc" -> let module M = ForwardAnalysis.Algorithm(Coarse.StackNoGC) in M.verify property
  | "coarsequeue" -> let module M = ForwardAnalysis.Algorithm(Coarse.Queue) in M.verify property
  | "coarsequeuenogc" -> let module M = ForwardAnalysis.Algorithm(Coarse.QueueNoGC) in M.verify property
  | "twolocksqueue" -> let module M = ForwardAnalysis.Algorithm(Coarse.TwoLocksQueue) in M.verify property
  | "twolocksqueuenogc" -> let module M = ForwardAnalysis.Algorithm(Coarse.TwoLocksQueue_NoGC) in M.verify property
      
  | "treiber" -> let module M = ForwardAnalysis.Algorithm(Treiber.Reset) in M.verify property
  | "treibernogc" -> let module M = ForwardAnalysis.Algorithm(Treiber.ResetNoGC) in M.verify property

  | "ms" -> let module M = ForwardAnalysis.Algorithm(MichaelScott.Reset) in M.verify property
  | "msnogc" -> let module M = ForwardAnalysis.Algorithm(MichaelScott.ResetNoGC) in M.verify property

  | "coarseprioqueuebuckets" -> let module M = ForwardAnalysis.Algorithm(Coarse.PriorityQueue_Buckets) in M.verify property
  | "coarseprioqueuelistbased" -> let module M = ForwardAnalysis.Algorithm(Coarse.PriorityQueue_ListBased) in M.verify property
  | "bucketlocksprioqueue" -> let module M = ForwardAnalysis.Algorithm(Coarse.BucketLocksPriorityQueue) in M.verify property

(*   | "deque" -> let module M = ForwardAnalysis.Algorithm(MichaelScott.Deque) in M.verify property *)

(*   | "lockfreeprioqueue" -> let module M = ForwardAnalysis.Algorithm(QueueExample.PriorityQueue) in M.verify property *)

      (* Examples with intentional Bugs *)
      
  | "bug_mscommitempty" -> let module M = ForwardAnalysis.Algorithm(BogusExample.MS_CommitPoint_Empty) in M.verify property
  | "bug_msnocounter" -> let module M = ForwardAnalysis.Algorithm(BogusExample.MS_NoGC) in M.verify property
  | "bug_msswap" -> let module M = ForwardAnalysis.Algorithm(BogusExample.MS_Swap) in M.verify property
  | "bug_treibernocounter" -> let module M = ForwardAnalysis.Algorithm(BogusExample.Treiber_noGC) in M.verify property

  | "bug_2lockQcommitunlock" -> let module M = ForwardAnalysis.Algorithm(BogusExample.TwoLocksQueue_CommitPointsUnlock) in M.verify property

  | "bug_treiberwrongdata" -> let module M = ForwardAnalysis.Algorithm(BogusExample.Treiber_OmittingData) in M.verify property

      (* Debugging purpose only *)
  | "test" -> let module M = ForwardAnalysis.Test(Treiber.Reset)(Treiber.ResetNoGC) in M.verify property
  | "postonly" -> let module M = ForwardAnalysis.Post(BogusExample.Treiber_OmittingData) in M.verify property


  | "debug" -> runDebug ();
  | _ as example -> raise (Arg.Bad (sprintf "Eh? What example? => %s\n" example))


(* let main () = Arg.parse arglist (run_example !property) usage *)
(* let _ = Printexc.print main () *)

let _ = begin
  Arg.parse arglist (fun arg -> raise (Arg.Bad (sprintf "Bad argument: %s\n" arg))) usage;
  run_example !property !example
end;;
	
